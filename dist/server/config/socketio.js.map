{"version":3,"sources":["../../../server/config/socketio.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;AAEb,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;;AAGtC,SAAS,YAAY,CAAC,MAAM,EAAE,EAC7B;;;AAGD,SAAS,SAAS,CAAC,MAAM,EAAE;;AAEzB,QAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI,EAAI;AACxB,WAAO,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;GACxE,CAAC,CAAC;;;CAIJ;;AAED,MAAM,CAAC,OAAO,GAAG,UAAS,QAAQ,EAAE;;;;;;;;;;;;;;;;AAgBlC,UAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,UAAS,MAAM,EAAE;AACzC,UAAM,CAAC,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,KAAK,IAAI,GAC1C,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,GACtE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;;AAE3B,UAAM,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;;;;;;;AAOhC,UAAM,CAAC,EAAE,CAAC,YAAY,EAAE,YAAM;AAC5B,kBAAY,CAAC,MAAM,CAAC,CAAC;AACrB,aAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;KACnD,CAAC,CAAC;;;AAGH,aAAS,CAAC,MAAM,CAAC,CAAC;AAClB,WAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;GAChD,CAAC,CAAC;CACJ,CAAA","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\nvar config = require('./environment');\n\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {\n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    console.info('[%s] %s', socket.address, JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n\n}\n\nmodule.exports = function(socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function(socket) {\n    socket.address = socket.handshake.address !== null ?\n            socket.handshake.address.address + ':' + socket.handshake.address.port :\n            process.env.DOMAIN;\n\n    socket.connectedAt = new Date();\n\n    /*socket.log = function(...data) {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };*/\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      console.info('[%s] DISCONNECTED', socket.address);\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    console.info('[%s] CONNECTED', socket.address);\n  });\n}\n"]}